{% extends '_base.py.j2' %}

{% block content %}
import functools
import pkg_resources
from typing import Mapping, Optional, Sequence, Tuple, Union
{%- if service.has_field_headers %}
from urllib import parse
{%- endif %}

from google.api_core import gapic_v1
{%- if service.has_lro %}
from google.api_core import operation
{%- endif %}
from google.api_core import retry
from google.auth import credentials

{% for package, pb2_module in service.pb2_modules -%}
from {{ package }} import {{ pb2_module }}
{% endfor %}
from .transports import get_transport_class
from .transports import {{ service.name }}Transport


# LIBRARY_VERSION: str = pkg_resources.get_distribution(
#     '{{ api.warehouse_package_name }}',
# ).version


class {{ service.name }}:
    """{{ service.meta.doc|wrap(width=72, subsequent_indent='    ') }}
    """
    def __init__(self, *,
            credentials: credentials.Credentials = None,
            transport: Union[str, {{ service.name }}Transport] = None,
            ) -> None:
        """Instantiate the {{ (service.name|snake_case).replace('_', ' ') }}.

        Args:
            credentials (Optional[google.auth.credentials.Credential]): The
                authorization credentials to attach to requests. These
                credentials identify the application to the service; if none
                are specified, the client will attempt to ascertain the
                credentials from the environment.
            transport (Union[str, ~.{{ service.name }}Transport): The
                transport to use. If set to None, a transport is chosen
                automatically.
        """
        # Save or instantiate the transport.
        # Ordinarily, we provide the transport, but allowing a custom transport
        # instance provides an extensibility point for unusual situations.
        if isinstance(transport, {{ service.name }}Transport):
            if credentials:
                raise ValueError('When providing a transport instance, '
                                 'provide its credentials directly.')
            self._transport = transport
        else:
            Transport = get_transport_class(transport)
            self._transport = Transport(credentials=credentials)
    {%- for method in service.methods.values() %}

    @functools.singledispatch
    def {{ method.name|snake_case }}(self,
            request: {{ method.input.pb2_module }}.{{ method.input.name }}, *,
            retry: retry.Retry = None,
            timeout: float = None,
            metadata: Sequence[Tuple[str, str]] = (),
            {%- if method.lro_payload %}
            ) -> operation.Operation:
            {%- else %}
            ) -> {{ method.output.pb2_module }}.{{ method.output.name }}:
            {%- endif %}
        """{{ method.meta.doc|wrap(width=72, subsequent_indent=' ' * 8) }}

        Args:
            request (~.{{ method.input.pb2_module }}.{{ method.input.name }}):
                The request object. {{ method.input.meta.doc|wrap(width=72,
                initial_width=36, subsequent_indent=' ' * 16) }}
            retry (~.retry.Retry): Designation of what errors, if any,
                should be retried.
            timeout (float): The timeout for this request.
            metadata (Sequence[Tuple[str, str]]): Strings which should be
                sent alont with the request as metadata.

        Returns:
            {%- if method.lro_payload %}
            ~.operation.Operation:
                A :class:`google.api_core.operation.Operation` instance.
            {%- else %}
            ~.{{ method.output.pb2_module }}.{{ method.output.name }}:
                {{ method.output.meta.doc|wrap(width=72, initial_width=56,
                                               subsequent_indent=' ' * 16) }}
            {%- endif %}
        """
        # Wrap the RPC method; this adds retry and timeout information,
        # and friendly error handling.
        rpc = gapic_v1.method.wrap_method(
            self._transport.{{ method.name|snake_case }},
            default_retry=None,  # FIXME
            default_timeout=None,  # FIXME
            client_info=self.client_info,
        )
        {%- if method.field_headers %}

        # Ensure metadata is a mutable sequence.
        if metadata is None:
            metadata = []
        else:
            metadata = list(metadata)

        # Add request headers to metadata.
        try:
            request_headers = (
                {%- for field_header in method.field_headers %}
                ('{{ field_header.header }}', '{{ field_header.field }}', request.{{ field_header.field }}),
                {%- endfor %}
            )
        except AttributeError:
            # Suppress when attribute missing.
            pass
        else:
            request_metadata = [
                (
                    header,
                    '{}={}'.format(
                        parse.quote_plus(key),
                        parse.quote_plus(value),
                    ),
                )
                for (header, key, value)
                in request_headers
            ]
            metadata.extend(request_metadata)
        {%- endif %}

        # Send the request.
        response = rpc(request, retry=retry, timeout=timeout, metadata=metadata)
        {%- if method.lro_payload %}

        # Wrap the response in an operation future
        response = operation.from_gapic(
            response,
            self._transport.operations_client,
            {{ method.lro_payload.pb2_module }}.{{ method.lro_payload.name }},
            metadata_type={{ method.lro_metadata.pb2_module }}.{{ method.lro_metadata.name }}
        )
        {%- endif %}

        # Done; return the response.
        return response
    {%- endfor %}

    @property
    def client_info(self) -> gapic_v1.client_info.ClientInfo:
        """Return information about this client (for metrics).

        Returns:
            client_info.ClientInfo: An object with metadata about this
                client library.
        """
        return gapic_v1.client_info.ClientInfo()
{% endblock %}
